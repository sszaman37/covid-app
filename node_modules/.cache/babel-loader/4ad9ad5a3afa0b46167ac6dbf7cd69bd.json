{"ast":null,"code":"var _jsxFileName = \"/Users/saadat/Documents/Code/covid-app/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    deaths,\n    recovered\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData((await fetchDailyData()));\n    };\n\n    fetchAPI();\n  }, []);\n  const lineChart = dailyData.length !== 0 ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(data => data.confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(data => data.deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }) : null;\n  const barChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\n        data: [confirmed.value, recovered.value, deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current State in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 8\n    }\n  }, country ? barChart : lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/saadat/Documents/Code/covid-app/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","deaths","recovered","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","value","legend","display","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,IAAT,EAAeC,GAAf,QAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAC;AAACC,IAAAA,SAAD;AAAWC,IAAAA,MAAX;AAAkBC,IAAAA;AAAlB,GAAP;AAAqCC,EAAAA;AAArC,CAAD,KAAmD;AAC/D,QAAK,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAAzC;AAEEC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,QAAQ,GAAG,YAAW;AACxBD,MAAAA,YAAY,EAAC,MAAMX,cAAc,EAArB,EAAZ;AACH,KAFD;;AAGAY,IAAAA,QAAQ;AACX,GALQ,EAKN,EALM,CAAT;AAOA,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,KAAqB,CAArB,gBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADJ;AAEJC,MAAAA,QAAQ,EAAE,CAAC;AACTb,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAeX,IAAD,IAAUA,IAAI,CAACC,SAA7B,CADG;AAETa,QAAAA,KAAK,EAAE,UAFE;AAGTC,QAAAA,WAAW,EAAE,SAHJ;AAITC,QAAAA,IAAI,EAAE;AAJG,OAAD,EAKP;AACDhB,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAeX,IAAD,IAAUA,IAAI,CAACE,MAA7B,CADL;AAEDY,QAAAA,KAAK,EAAE,QAFN;AAGDC,QAAAA,WAAW,EAAE,KAHZ;AAIDE,QAAAA,eAAe,EAAE,sBAJhB;AAKDD,QAAAA,IAAI,EAAE;AALL,OALO;AAFN,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAmBI,IApBR;AAuBE,QAAME,QAAQ,GACZjB,SAAS,gBAEL,oBAAC,GAAD;AACE,IAAA,IAAI,EAAE;AACJS,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADJ;AAEJG,MAAAA,QAAQ,EAAE,CAAC;AACTC,QAAAA,KAAK,EAAE,QADE;AAETG,QAAAA,eAAe,EAAE,CAAC,mBAAD,EAAqB,mBAArB,EAAyC,mBAAzC,CAFR;AAGTjB,QAAAA,IAAI,EAAC,CAACC,SAAS,CAACkB,KAAX,EAAkBhB,SAAS,CAACgB,KAA5B,EAAmCjB,MAAM,CAACiB,KAA1C;AAHI,OAAD;AAFN,KADR;AAUE,IAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAC;AAACC,QAAAA,OAAO,EAAE;AAAV,OADA;AAEPC,MAAAA,KAAK,EAAC;AAACD,QAAAA,OAAO,EAAE,IAAV;AAAgBE,QAAAA,IAAI,EAAG,oBAAmBnB,OAAQ;AAAlD;AAFC,KAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFK,GAiBH,IAlBR;AAqBH,sBACI;AAAK,IAAA,SAAS,EAAEN,MAAM,CAAC0B,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKpB,OAAO,GAAGc,QAAH,GAAaV,SADzB,CADJ;AAKF,CA3DD;;AA4DA,eAAeT,KAAf","sourcesContent":["import React,{ useState, useEffect }from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar }from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data:{confirmed,deaths,recovered}, country}) => {\n  const[dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () =>{\n            setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length !== 0 ? (\n          <Line\n            data={{\n              labels: dailyData.map(({ date }) => date),\n              datasets: [{\n                data: dailyData.map((data) => data.confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill: true, \n              }, {\n                data: dailyData.map((data) => data.deaths),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                fill: true,\n              },\n              ],\n            }}\n          />\n        ) : null\n      );\n\n      const barChart = (\n        confirmed\n          ? (\n            <Bar \n              data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                  label: 'People',\n                  backgroundColor: ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\n                  data:[confirmed.value, recovered.value, deaths.value],\n                }]\n\n              }}\n              options={{\n                legend:{display: false},\n                title:{display: true, text: `Current State in ${country}`},\n              }}\n            />\n          ) : null\n      );\n\n   return(\n       <div className={styles.container}>\n           {country ? barChart: lineChart}\n       </div>\n   )\n}\nexport default Chart;"]},"metadata":{},"sourceType":"module"}